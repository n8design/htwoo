{
  // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "HTWOOReactComponent": {
    "prefix": "HOOComponent",
    "body": [
      "import * as React from \"react\";",
      "import { IHOOStandardProps } from \"../common/IHOOStandardProps\"",
      "",
      "export interface IHOO${componentName}Props extends IHOOStandardProps {",
      "  /**",
      "   * (Optional) HTMLElement attributes that will be applied to the root element of the component.",
      "   * Class names will be appended to the end of the default class string - hoo-${rootStyle} {rootElementAttributes.class}",
      "  */",
      "  rootElementAttributes?: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;",
      "}",
      "",
      "export interface IHOO${componentName}State {",
      "}",
      "",
      "export class HOO${componentName}State implements IHOO${componentName}State {",
      "constructor() {}",
      "}",
      "",
      "export default class HOO${componentName} extends React.PureComponent<IHOO${componentName}Props, IHOO${componentName}State> {",
      "  private LOG_SOURCE: string = \"ðŸ’¦HOO${componentName}\";",
      "  private _rootProps = { \"data-component\": this.LOG_SOURCE };",
      "  private _componentClass: string = \"hoo-${rootStyle}\";",
      "",
      "  constructor(props:IHOO${componentName}Props){",
      "    super(props);",
      "    this.LOG_SOURCE = props.dataComponent || \"ðŸ’¦HOO${componentName}\";",
      "    this.state = new HOO${componentName}State();",
      "  }",
      "",
      "  public render(): React.ReactElement<IHOO${componentName}Props> {",
      "    try{",
      "      if (this.props.reactKey) { this._rootProps[\"key\"] = this.props.reactKey }",
      "      const className = (this.props.rootElementAttributes?.className) ? `${this._componentClass} ${this.props.rootElementAttributes?.className}` : this._componentClass;",
      "      return (",
      "        <div data-component={this.LOG_SOURCE} {...this.props.rootElementAttributes} className={className}>",
      "        </div>",
      "      );",
      "    } catch (err) {",
      "      console.error(`${this.LOG_SOURCE\\} (render) - ${err\\}`);",
      "      return null;",
      "    }",
      "  }",
      "}"
    ],
    "description": "HTWOO React Component"
  },
  "HOOStory": {
    "prefix": "HOOStory",
    "body": [
      "import { ArgTypes } from '@storybook/blocks';",
      "import { Meta, Story, Canvas } from '@storybook/addon-docs';",
      "import ${componentName} from './${componentName}';",
      "",
      "<Meta title='???/???/${componentName}' component={${componentName}} />",
      "",
      "# ${componentName}",
      "",
      "// Insert details of any enums and or details about implementing the component",
      "",
      "## Arguments",
      "",
      "<ArgTypes of={${componentName}} />",
      "",
      "export const Template = (args) => <${componentName} {...args} />;",
      "",
      "## Basic",
      "",
      "<Canvas>",
      "  <Story",
      "    name=\"Basic\"",
      "    args={",
      "      {}",
      "    }>",
      "    {Template.bind({})}",
      "  </Story>",
      "</Canvas>",
      "",
      "## Extending",
      "",
      "<Canvas>",
      "  <Story",
      "    name=\"Extending\"",
      "    args={",
      "      {rootElementAttributes: { style: { backgroundColor: \"red\" } }}",
      "    }>",
      "    {Template.bind({})}",
      "  </Story>",
      "</Canvas>"
    ],
    "description": "HTWOO Storybook MDX"
  }
}