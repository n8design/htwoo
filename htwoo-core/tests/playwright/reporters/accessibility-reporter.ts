import { FullConfig, FullResult, Reporter, Suite, TestCase, TestResult } from '@playwright/test/reporter';
import * as fs from 'fs';
import * as path from 'path';
import { generateHtmlFromJson } from '../utils/html-reporter';

/**
 * Custom Playwright reporter for accessibility testing
 * Integrates with axe-html-reporter to generate enhanced HTML reports
 */
class AccessibilityReporter implements Reporter {
  private config: FullConfig;
  private results: Array<{ test: TestCase; result: TestResult }> = [];

  onBegin(config: FullConfig, suite: Suite) {
    this.config = config;
    console.log(`üéØ Starting accessibility test run with ${suite.allTests().length} tests`);
  }

  onTestEnd(test: TestCase, result: TestResult) {
    this.results.push({ test, result });
    
    // Log progress for batched tests
    if (test.title.includes('batch')) {
      const status = result.status === 'passed' ? '‚úÖ' : '‚ùå';
      console.log(`${status} ${test.title} (${result.duration}ms)`);
    }
  }

  async onEnd(result: FullResult) {
    console.log(`üèÅ Accessibility test run completed with status: ${result.status}`);
    
    // Generate enhanced HTML reports if JSON results exist
    await this.generateEnhancedReports();
    
    // Print summary of available reports
    this.printReportSummary();
  }

  private async generateEnhancedReports() {
    const reportsDir = path.join(process.cwd(), 'test-results');
    const jsonPath = path.join(reportsDir, 'axe-results.json');
    const htmlPath = path.join(reportsDir, 'accessibility-report-axe.html');
    
    // Check if axe results JSON exists (generated by our test)
    if (fs.existsSync(jsonPath)) {
      try {
        // Ensure output directory exists
        const htmlDir = path.dirname(htmlPath);
        if (!fs.existsSync(htmlDir)) {
          fs.mkdirSync(htmlDir, { recursive: true });
        }
        
        // Generate HTML report from JSON
        generateHtmlFromJson(jsonPath, htmlPath);
        console.log(`üìä Enhanced HTML accessibility report generated: ${htmlPath}`);
      } catch (error) {
        console.warn(`‚ö†Ô∏è  Could not generate enhanced HTML report: ${error}`);
      }
    }
  }

  private printReportSummary() {
    const reportsDir = 'test-results';
    console.log('\nüìä ACCESSIBILITY REPORTS GENERATED:');
    console.log('=============================================');
    
    // Standard Playwright reports
    console.log(`üìÑ Playwright HTML Report: ${reportsDir}/accessibility-playwright-report/index.html`);
    console.log(`üìÑ Playwright JSON Report: ${reportsDir}/accessibility-results.json`);
    console.log(`üìÑ JUnit XML Report: ${reportsDir}/accessibility-junit.xml`);
    
    // Enhanced accessibility reports
    const summaryPath = path.join(process.cwd(), reportsDir, 'accessibility-summary.html');
    const axeHtmlPath = path.join(process.cwd(), reportsDir, 'accessibility-report-axe.html');
    const jsonPath = path.join(process.cwd(), reportsDir, 'accessibility-detailed.json');
    
    if (fs.existsSync(summaryPath)) {
      console.log(`üìä Accessibility Summary: ${reportsDir}/accessibility-summary.html`);
    }
    
    if (fs.existsSync(axeHtmlPath)) {
      console.log(`üéØ Enhanced Axe HTML Report: ${reportsDir}/accessibility-report-axe.html`);
    }
    
    if (fs.existsSync(jsonPath)) {
      console.log(`üìÑ Detailed JSON Report: ${reportsDir}/accessibility-detailed.json`);
    }
    
    console.log('\nüöÄ QUICK COMMANDS TO VIEW REPORTS:');
    console.log('=============================================');
    console.log(`open ${reportsDir}/accessibility-playwright-report/index.html     # Playwright report`);
    console.log(`open ${reportsDir}/accessibility-summary.html                       # Summary report`);
    console.log(`open ${reportsDir}/accessibility-report-axe.html                    # Enhanced axe report`);
    console.log('=============================================\n');
  }
}

export default AccessibilityReporter;
