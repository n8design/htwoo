(self.webpackChunk_n8d_htwoo_react=self.webpackChunk_n8d_htwoo_react||[]).push([[90],{"../node_modules/@mdx-js/react/lib/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{R:()=>useMDXComponents,x:()=>MDXProvider});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../node_modules/react/index.js");const emptyComponents={},MDXContext=react__WEBPACK_IMPORTED_MODULE_0__.createContext(emptyComponents);function useMDXComponents(components){const contextComponents=react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext);return react__WEBPACK_IMPORTED_MODULE_0__.useMemo((function(){return"function"==typeof components?components(contextComponents):{...contextComponents,...components}}),[contextComponents,components])}function MDXProvider(properties){let allComponents;return allComponents=properties.disableParentContext?"function"==typeof properties.components?properties.components(emptyComponents):properties.components||emptyComponents:useMDXComponents(properties.components),react__WEBPACK_IMPORTED_MODULE_0__.createElement(MDXContext.Provider,{value:allComponents},properties.children)}},"../node_modules/@storybook/addon-docs/dist sync recursive":module=>{function webpackEmptyContext(req){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}webpackEmptyContext.keys=()=>[],webpackEmptyContext.resolve=webpackEmptyContext,webpackEmptyContext.id="../node_modules/@storybook/addon-docs/dist sync recursive",module.exports=webpackEmptyContext},"../node_modules/storybook/dist/components sync recursive":module=>{function webpackEmptyContext(req){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}webpackEmptyContext.keys=()=>[],webpackEmptyContext.resolve=webpackEmptyContext,webpackEmptyContext.id="../node_modules/storybook/dist/components sync recursive",module.exports=webpackEmptyContext},"./src/generalDocs/SPFxThemes.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>MDXContent});__webpack_require__("../node_modules/react/index.js");var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("../node_modules/react/jsx-runtime.js"),_Volumes_Code_n8design_projects_htwoo_node_modules_storybook_addon_docs_dist_shims_mdx_react_shim_mjs__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("../node_modules/@mdx-js/react/lib/index.js"),_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("../node_modules/@storybook/addon-docs/dist/blocks.mjs");function _createMdxContent(props){const _components={code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,_Volumes_Code_n8design_projects_htwoo_node_modules_storybook_addon_docs_dist_shims_mdx_react_shim_mjs__WEBPACK_IMPORTED_MODULE_3__.R)(),...props.components};return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_2__.W8,{title:"Advanced/SPFxThemes Class"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h1,{id:"using-the-spfxthemes-class",children:"Using the SPFxThemes Class"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"The SPFxThemes class provides handling for setting up the CSS Variables that the htwoo-* library depends on to render the controls with the appropriate styling for the theme of the surface they are being rendered (i.e SharePoint page sections, inverted sections, Microsoft Teams, classic SharePoint page, or outside of Microsoft surface)."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2,{id:"initialize",children:"Initialize"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"The class can be instatiated by creating a new instance in the root ts file of your project and then initializing it in the SPFx onInit method. This method is a good choice where you want to initialize the theme for the solution but do not need access to any of the theme properties elesewhere in your solution."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-typescript",children:"import { ThemeProvider } from '@microsoft/sp-component-base';\nimport { SPFxThemes, ISPFxThemes } from '@n8d/htwoo-react/SPFxThemes';\n\nprivate _spfxThemes: ISPFxThemes = new SPFxThemes();\n\npublic async onInit(): Promise<void> {\n  // Consume the new ThemeProvider service\n  const themeProvider = this.context.serviceScope.consume(ThemeProvider.serviceKey);\n  this._spfxThemes.initThemeHandler(this.domElement, themeProvider);\n\n  // If no ThemeProvider service, use undefined which will use page context\n  this._spfxThemes.initThemeHandler(document.body, undefined, undefined, undefined, true);\n}\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"If you are outside the Microsoft ecosystem and building your own solution you can also utilize one of the themes built into HTWOO-Core or build your own theme."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"To import the theme as a json file you will need to enable typescript to import json files by adding the following to your tsconfig.json file in the compilerOptions section:"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-json",children:'"compilerOptions": {\n    "resolveJsonModule": true,\n    "esModuleInterop": true\n}\n'})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["Then you can import the theme in the imports statement, and pass it to the public function ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"setCSSVariables"})," in the SPFxThemes class. Or as outlined you can build your own theme using the available typings."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-typescript",children:"import { spfxThemes } from '@n8d/htwoo-react/SPFxThemes';\n// Note there are multiple theme files defined in the HTWOO-Core project\nimport blueTheme from '@n8d/htwoo-core/lib/sass/themes/blue.theme.json';\n\nfunction useProvidedTheme(): void {\n  // Whatever element you want to attach to\n  const element = docuement.getElementById(\"MyElement\");\n  // Bypass initThemeHandler and set domElement and pass json theme object directly to the setCSSVariables method.\n  spfxThemes.domElement = element;\n  spfxThemes.setCSSVariables(blueTheme);\n}\n\nfunction useCustomTheme(): void {\n  // Create a custom theme using the provided typings\n  const customTheme: IHOOTheme = {...theme values...};\n  // Bypass initThemeHandler and set domElement and pass custom json theme object directly to the setCSSVariables method.\n  spfxThemes.domElement = element;\n  spfxThemes.setCSSVariables(customTheme);\n}\n\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2,{id:"available-constants",children:"Available Constants"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"In addition, the SPFxThemes class exports two constants that can be utilized based on your needs."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3,{id:"spfxthemes",children:"spfxThemes"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["The first is an exported constant ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"spfxThemes"})," that can be utilized anywhere in your solution by simply importing the constant into your file and making sure you've initialized it in the SPFx onInit method. This is not the correct choice for a web part implementation because web parts can end up in page sections with an inverted background color, if you use a globally defined theme provider then whichever web part loads first with initialize the theme provider and all the instances of the web part on the page will utilize that one theme."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-typescript",children:"import { ThemeProvider } from '@microsoft/sp-component-base';\nimport { spfxThemes } from '@n8d/htwoo-react/SPFxThemes';\n\npublic async onInit(): Promise<void> {\n  // Consume the new ThemeProvider service  \n  const microsoftTeams = this.context.sdks?.microsoftTeams;\n  const themeProvider = this.context.serviceScope.consume(ThemeProvider.serviceKey);\n  spfxThemes.initThemeHandler(this.domElement, themeProvider, microsoftTeams);\n\n  // If no ThemeProvider service, do not include property which will use page context\n  spfxThemes.initThemeHandler(document.body, undefined, undefined, undefined, true);\n}\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3,{id:"spfxthemescontext---react-context-themeprovider",children:"SPFxThemesContext - React Context ThemeProvider"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["The second is an exported React Context Provider called ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"SPFxThemesContext"})," which can be used to add a Context provider to your React application. One way to use this in SPFx is to render the root element inside the Provider. This is a good choice for web parts that could end up in multiple locations on the same page. Each instance of the web part would initialize their own theme provider yet to get at theme information you don't have to pass the object down the React property chain."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-typescript",children:"import { ThemeProvider } from '@microsoft/sp-component-base';\nimport { SPFxThemes, ISPFxThemes, SPFxThemesContext } from '@n8d/htwoo-react/SPFxThemes';\n\nprivate _spfxThemes: ISPFxThemes = new SPFxThemes();\n\npublic async onInit(): Promise<void> {\n  // Consume the new ThemeProvider service\n  const microsoftTeams = this.context.sdks?.microsoftTeams;\n  const themeProvider = this.context.serviceScope.consume(ThemeProvider.serviceKey);\n  this._spfxThemes.initThemeHandler(this.domElement, themeProvider, microsoftTeams);\n}\n\npublic render(): void {\n  let element = null;\n  try {\n    const props: IMyComponentProps = { };\n    element = React.createElement(\n      MyComponent, props\n    );\n      \n    //Pass in the private _spfxThemes variable as the value to the provider\n    const provider = React.createElement(SPFxThemesContext.Provider, { value: this._spfxThemes }, element);\n    ReactDom.render(provider, this.domElement);\n  } catch (err) {\n    console.error(`${this.LOG_SOURCE} (render) ${err}`);\n  }\n}\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"To consume the provider in a React Component you would do the following"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-typescript",children:"import { SPFxThemesContext, SPFxThemes } from '@n8d/htwoo-react/SPFxThemes';\n\nexport default class MyComponent extends React.PureComponent<IMyComponentProps, IMyComponentState> {\n  static contextType = SPFxThemesContext;\n  private _spfxThemes: SPFxThemes;\n\n  constructor(props: IMyComponentProps) {\n    super(props);\n    this.state = {};\n  }\n\n  //After the component mounts the instance of the initialized _spfxThemes class is available to the component.\n  public componentDidMount(): void {\n    this._spfxThemes = this.context;\n  }\n\n  ....\n\n}\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2,{id:"properties",children:"Properties"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3,{id:"domelement-htmlelement",children:"domElement: HTMLElement"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"Provides a getter/setter for the domElement the theme is applied to."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3,{id:"isinverted-boolean-readonly",children:"isInverted: boolean (ReadOnly)"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"Provides a boolean that can be checked to tell if the SPFx solution is rendered in an inverted page section."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3,{id:"inteams-boolean-readonly",children:"inTeams: boolean (ReadOnly)"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"Provides a boolean that can be used to check if the solution is running in teams."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3,{id:"currenttheme-any-readonly",children:"currentTheme: any (ReadOnly)"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["Provides a method to retrieve the currewnt JSON theme applied to the domElement. Overridden when calling ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"setCSSVariables"})," or ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"initThemeHandler"}),"."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2,{id:"methods",children:"Methods"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3,{id:"initthemehandler-domelement-htmlelement-themeprovider-any-microsoftteams-any-usepagetheme-boolean--void",children:"initThemeHandler: (domElement: HTMLElement, themeProvider?: any, microsoftTeams?: any, usePageTheme?: boolean) => void;"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"Property | Type | Optional (Default) | Description\n---|---|---|---\ndomElement | HTMLElement | | The element to inject the CSS Variables onto, this scopes those variables to any siblings or children of that root element.\nthemeProvider | any (Typed as ThemeProvider from '@microsoft/sp-component-base' in SPFx) | Optional | An instance of the ThemeProvider from SPFx\nmicrosoftTeams | any (Typed as IMicrosoftTeams from '@microsoft/sp-webpart-base' in SPFx) | Optional | The Microsoft Teams context to apply theme for Teams\ntheme | any | Optional | A custom json theme object to be applied to the domElement.\nusePageTheme | boolean | Optional (False) | Used to override theme provider and apply theme to domElement based on the page theme"})]})}function MDXContent(props={}){const{wrapper:MDXLayout}={...(0,_Volumes_Code_n8design_projects_htwoo_node_modules_storybook_addon_docs_dist_shims_mdx_react_shim_mjs__WEBPACK_IMPORTED_MODULE_3__.R)(),...props.components};return MDXLayout?(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(MDXLayout,{...props,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_createMdxContent,{...props})}):_createMdxContent(props)}}}]);